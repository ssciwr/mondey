// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { GetLanguagesData, GetLanguagesResponse, GetMilestonesData, GetMilestonesResponse, GetMilestoneData, GetMilestoneResponse, GetMilestoneError, GetMilestoneGroupsData, GetMilestoneGroupsResponse, GetMilestoneGroupsError, SubmitMilestoneImageData, SubmitMilestoneImageError, GetUserQuestionsData, GetUserQuestionsResponse, GetChildQuestionsData, GetChildQuestionsResponse, CreateLanguageData, CreateLanguageResponse, CreateLanguageError, DeleteLanguageData, DeleteLanguageError, UpdateI18nData, UpdateI18nError, TranslateData, TranslateResponse, TranslateError, GetMilestoneGroupsAdminData, GetMilestoneGroupsAdminResponse, CreateMilestoneGroupAdminData, CreateMilestoneGroupAdminResponse, UpdateMilestoneGroupAdminData, UpdateMilestoneGroupAdminResponse, UpdateMilestoneGroupAdminError, DeleteMilestoneGroupAdminData, DeleteMilestoneGroupAdminError, OrderMilestoneGroupsAdminData, OrderMilestoneGroupsAdminError, UploadMilestoneGroupImageData, UploadMilestoneGroupImageError, CreateMilestoneData, CreateMilestoneResponse, CreateMilestoneError, UpdateMilestoneData, UpdateMilestoneResponse, UpdateMilestoneError, DeleteMilestoneData, DeleteMilestoneError, OrderMilestonesAdminData, OrderMilestonesAdminError, UploadMilestoneImageData, UploadMilestoneImageResponse, UploadMilestoneImageError, DeleteMilestoneImageData, DeleteMilestoneImageError, GetSubmittedMilestoneImagesData, GetSubmittedMilestoneImagesResponse, ApproveSubmittedMilestoneImageData, ApproveSubmittedMilestoneImageError, DeleteSubmittedMilestoneImageData, DeleteSubmittedMilestoneImageError, GetMilestoneAgeScoresData, GetMilestoneAgeScoresResponse, GetMilestoneAgeScoresError, AdminUpdateStatsData, AdminUpdateStatsResponse, AdminUpdateStatsError, GetUserQuestionsAdminData, GetUserQuestionsAdminResponse, CreateUserQuestionData, CreateUserQuestionResponse, UpdateUserQuestionData, UpdateUserQuestionResponse, UpdateUserQuestionError, DeleteUserQuestionData, DeleteUserQuestionError, OrderUserQuestionsAdminData, OrderUserQuestionsAdminError, GetChildQuestionsAdminData, GetChildQuestionsAdminResponse, CreateChildQuestionData, CreateChildQuestionResponse, UpdateChildQuestionData, UpdateChildQuestionResponse, UpdateChildQuestionError, DeleteChildQuestionData, DeleteChildQuestionError, OrderChildQuestionsAdminData, OrderChildQuestionsAdminError, GetUsersData, GetUsersResponse, GetResearchGroupsData, GetResearchGroupsResponse, CreateResearchGroupData, CreateResearchGroupResponse, CreateResearchGroupError, DeleteResearchGroupData, DeleteResearchGroupError, UsersCurrentUserData, UsersCurrentUserResponse, UsersPatchCurrentUserData, UsersPatchCurrentUserResponse, UsersPatchCurrentUserError, UsersDeleteUserData, UsersDeleteUserResponse, UsersDeleteUserError, UsersUserData, UsersUserResponse, UsersUserError, UsersPatchUserData, UsersPatchUserResponse, UsersPatchUserError, GetChildrenData, GetChildrenResponse, CreateChildData, CreateChildResponse, CreateChildError, UpdateChildData, UpdateChildResponse, UpdateChildError, DeleteChildData, DeleteChildError, GetChildData, GetChildResponse, GetChildError, DeleteChildImageData, DeleteChildImageError, GetChildImageData, GetChildImageError, UploadChildImageData, UploadChildImageError, GetCurrentMilestoneAnswerSessionData, GetCurrentMilestoneAnswerSessionResponse, GetCurrentMilestoneAnswerSessionError, UpdateMilestoneAnswerData, UpdateMilestoneAnswerResponse, UpdateMilestoneAnswerError, GetCurrentUserAnswersData, GetCurrentUserAnswersResponse, UpdateCurrentUserAnswersData, UpdateCurrentUserAnswersResponse, UpdateCurrentUserAnswersError, GetCurrentChildAnswersData, GetCurrentChildAnswersResponse, GetCurrentChildAnswersError, UpdateCurrentChildAnswersData, UpdateCurrentChildAnswersError, GetExpiredMilestoneAnswerSessionsData, GetExpiredMilestoneAnswerSessionsResponse, GetExpiredMilestoneAnswerSessionsError, GetMilestonegroupsForSessionData, GetMilestonegroupsForSessionResponse, GetMilestonegroupsForSessionError, GetSummaryFeedbackForAnswersessionData, GetSummaryFeedbackForAnswersessionResponse, GetSummaryFeedbackForAnswersessionError, GetDetailedFeedbackForAnswersessionData, GetDetailedFeedbackForAnswersessionResponse, GetDetailedFeedbackForAnswersessionError, AuthCookieLoginData, AuthCookieLoginResponse, AuthCookieLoginError, AuthCookieLogoutData, AuthCookieLogoutResponse, RegisterRegisterData, RegisterRegisterResponse, RegisterRegisterError, ResetForgotPasswordData, ResetForgotPasswordError, ResetResetPasswordData, ResetResetPasswordError, VerifyRequestTokenData, VerifyRequestTokenError, VerifyVerifyData, VerifyVerifyResponse, VerifyVerifyError, GetResearchDataData, GetResearchDataCsvData, GetResearchNamesData, GetResearchNamesResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Languages
 */
export const getLanguages = <ThrowOnError extends boolean = false>(options?: Options<GetLanguagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLanguagesResponse, unknown, ThrowOnError>({
        url: '/languages/',
        ...options
    });
};

/**
 * Get Milestones
 */
export const getMilestones = <ThrowOnError extends boolean = false>(options?: Options<GetMilestonesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMilestonesResponse, unknown, ThrowOnError>({
        url: '/milestones/',
        ...options
    });
};

/**
 * Get Milestone
 */
export const getMilestone = <ThrowOnError extends boolean = false>(options: Options<GetMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMilestoneResponse, GetMilestoneError, ThrowOnError>({
        url: '/milestones/{milestone_id}',
        ...options
    });
};

/**
 * Get Milestone Groups
 */
export const getMilestoneGroups = <ThrowOnError extends boolean = false>(options: Options<GetMilestoneGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMilestoneGroupsResponse, GetMilestoneGroupsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/milestone-groups/{child_id}',
        ...options
    });
};

/**
 * Submit Milestone Image
 */
export const submitMilestoneImage = <ThrowOnError extends boolean = false>(options: Options<SubmitMilestoneImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SubmitMilestoneImageError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/submitted-milestone-images/{milestone_id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get User Questions
 */
export const getUserQuestions = <ThrowOnError extends boolean = false>(options?: Options<GetUserQuestionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserQuestionsResponse, unknown, ThrowOnError>({
        url: '/user-questions/',
        ...options
    });
};

/**
 * Get Child Questions
 */
export const getChildQuestions = <ThrowOnError extends boolean = false>(options?: Options<GetChildQuestionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChildQuestionsResponse, unknown, ThrowOnError>({
        url: '/child-questions/',
        ...options
    });
};

/**
 * Create Language
 */
export const createLanguage = <ThrowOnError extends boolean = false>(options: Options<CreateLanguageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLanguageResponse, CreateLanguageError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/languages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Language
 */
export const deleteLanguage = <ThrowOnError extends boolean = false>(options: Options<DeleteLanguageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteLanguageError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/languages/{language_id}',
        ...options
    });
};

/**
 * Update I18N
 */
export const updateI18N = <ThrowOnError extends boolean = false>(options: Options<UpdateI18nData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateI18nError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/i18n/{language_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Translate
 */
export const translate = <ThrowOnError extends boolean = false>(options: Options<TranslateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TranslateResponse, TranslateError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/translate/',
        ...options
    });
};

/**
 * Get Milestone Groups Admin
 */
export const getMilestoneGroupsAdmin = <ThrowOnError extends boolean = false>(options?: Options<GetMilestoneGroupsAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMilestoneGroupsAdminResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-groups/',
        ...options
    });
};

/**
 * Create Milestone Group Admin
 */
export const createMilestoneGroupAdmin = <ThrowOnError extends boolean = false>(options?: Options<CreateMilestoneGroupAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateMilestoneGroupAdminResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-groups/',
        ...options
    });
};

/**
 * Update Milestone Group Admin
 */
export const updateMilestoneGroupAdmin = <ThrowOnError extends boolean = false>(options: Options<UpdateMilestoneGroupAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMilestoneGroupAdminResponse, UpdateMilestoneGroupAdminError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Milestone Group Admin
 */
export const deleteMilestoneGroupAdmin = <ThrowOnError extends boolean = false>(options: Options<DeleteMilestoneGroupAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteMilestoneGroupAdminError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-groups/{milestone_group_id}',
        ...options
    });
};

/**
 * Order Milestone Groups Admin
 */
export const orderMilestoneGroupsAdmin = <ThrowOnError extends boolean = false>(options: Options<OrderMilestoneGroupsAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, OrderMilestoneGroupsAdminError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-groups/order/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload Milestone Group Image
 */
export const uploadMilestoneGroupImage = <ThrowOnError extends boolean = false>(options: Options<UploadMilestoneGroupImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UploadMilestoneGroupImageError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-group-images/{milestone_group_id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Create Milestone
 */
export const createMilestone = <ThrowOnError extends boolean = false>(options: Options<CreateMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMilestoneResponse, CreateMilestoneError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestones/{milestone_group_id}',
        ...options
    });
};

/**
 * Update Milestone
 */
export const updateMilestone = <ThrowOnError extends boolean = false>(options: Options<UpdateMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMilestoneResponse, UpdateMilestoneError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestones/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Milestone
 */
export const deleteMilestone = <ThrowOnError extends boolean = false>(options: Options<DeleteMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteMilestoneError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestones/{milestone_id}',
        ...options
    });
};

/**
 * Order Milestones Admin
 */
export const orderMilestonesAdmin = <ThrowOnError extends boolean = false>(options: Options<OrderMilestonesAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, OrderMilestonesAdminError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestones/order/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload Milestone Image
 */
export const uploadMilestoneImage = <ThrowOnError extends boolean = false>(options: Options<UploadMilestoneImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadMilestoneImageResponse, UploadMilestoneImageError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-images/{milestone_id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete Milestone Image
 */
export const deleteMilestoneImage = <ThrowOnError extends boolean = false>(options: Options<DeleteMilestoneImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteMilestoneImageError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-images/{milestone_image_id}',
        ...options
    });
};

/**
 * Get Submitted Milestone Images
 */
export const getSubmittedMilestoneImages = <ThrowOnError extends boolean = false>(options?: Options<GetSubmittedMilestoneImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSubmittedMilestoneImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/submitted-milestone-images/',
        ...options
    });
};

/**
 * Approve Submitted Milestone Image
 */
export const approveSubmittedMilestoneImage = <ThrowOnError extends boolean = false>(options: Options<ApproveSubmittedMilestoneImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ApproveSubmittedMilestoneImageError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/submitted-milestone-images/approve/{submitted_milestone_image_id}',
        ...options
    });
};

/**
 * Delete Submitted Milestone Image
 */
export const deleteSubmittedMilestoneImage = <ThrowOnError extends boolean = false>(options: Options<DeleteSubmittedMilestoneImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteSubmittedMilestoneImageError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/submitted-milestone-images/{submitted_milestone_image_id}',
        ...options
    });
};

/**
 * Get Milestone Age Scores
 */
export const getMilestoneAgeScores = <ThrowOnError extends boolean = false>(options: Options<GetMilestoneAgeScoresData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMilestoneAgeScoresResponse, GetMilestoneAgeScoresError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/milestone-age-scores/{milestone_id}',
        ...options
    });
};

/**
 * Admin Update Stats
 */
export const adminUpdateStats = <ThrowOnError extends boolean = false>(options: Options<AdminUpdateStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminUpdateStatsResponse, AdminUpdateStatsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/update-stats/{incremental_update}',
        ...options
    });
};

/**
 * Get User Questions Admin
 */
export const getUserQuestionsAdmin = <ThrowOnError extends boolean = false>(options?: Options<GetUserQuestionsAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserQuestionsAdminResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/user-questions/',
        ...options
    });
};

/**
 * Create User Question
 */
export const createUserQuestion = <ThrowOnError extends boolean = false>(options?: Options<CreateUserQuestionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUserQuestionResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/user-questions/',
        ...options
    });
};

/**
 * Update User Question
 */
export const updateUserQuestion = <ThrowOnError extends boolean = false>(options: Options<UpdateUserQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserQuestionResponse, UpdateUserQuestionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/user-questions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete User Question
 */
export const deleteUserQuestion = <ThrowOnError extends boolean = false>(options: Options<DeleteUserQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteUserQuestionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/user-questions/{user_question_id}',
        ...options
    });
};

/**
 * Order User Questions Admin
 */
export const orderUserQuestionsAdmin = <ThrowOnError extends boolean = false>(options: Options<OrderUserQuestionsAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, OrderUserQuestionsAdminError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/user-questions/order/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Child Questions Admin
 */
export const getChildQuestionsAdmin = <ThrowOnError extends boolean = false>(options?: Options<GetChildQuestionsAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChildQuestionsAdminResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/child-questions/',
        ...options
    });
};

/**
 * Create Child Question
 */
export const createChildQuestion = <ThrowOnError extends boolean = false>(options?: Options<CreateChildQuestionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateChildQuestionResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/child-questions/',
        ...options
    });
};

/**
 * Update Child Question
 */
export const updateChildQuestion = <ThrowOnError extends boolean = false>(options: Options<UpdateChildQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateChildQuestionResponse, UpdateChildQuestionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/child-questions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Child Question
 */
export const deleteChildQuestion = <ThrowOnError extends boolean = false>(options: Options<DeleteChildQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteChildQuestionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/child-questions/{child_question_id}',
        ...options
    });
};

/**
 * Order Child Questions Admin
 */
export const orderChildQuestionsAdmin = <ThrowOnError extends boolean = false>(options: Options<OrderChildQuestionsAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, OrderChildQuestionsAdminError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/child-questions/order/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Users
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/',
        ...options
    });
};

/**
 * Get Research Groups
 */
export const getResearchGroups = <ThrowOnError extends boolean = false>(options?: Options<GetResearchGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResearchGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/research-groups/',
        ...options
    });
};

/**
 * Create Research Group
 */
export const createResearchGroup = <ThrowOnError extends boolean = false>(options: Options<CreateResearchGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateResearchGroupResponse, CreateResearchGroupError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/research-groups/{user_id}',
        ...options
    });
};

/**
 * Delete Research Group
 */
export const deleteResearchGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteResearchGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteResearchGroupError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/admin/research-groups/{research_group_id}',
        ...options
    });
};

/**
 * Users:Current User
 */
export const usersCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<UsersCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersCurrentUserResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUser = <ThrowOnError extends boolean = false>(options: Options<UsersPatchCurrentUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchCurrentUserResponse, UsersPatchCurrentUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Users:Delete User
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponse, UsersDeleteUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:User
 */
export const usersUser = <ThrowOnError extends boolean = false>(options: Options<UsersUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersUserResponse, UsersUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:Patch User
 */
export const usersPatchUser = <ThrowOnError extends boolean = false>(options: Options<UsersPatchUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchUserResponse, UsersPatchUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Children
 */
export const getChildren = <ThrowOnError extends boolean = false>(options?: Options<GetChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChildrenResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children/',
        ...options
    });
};

/**
 * Create Child
 */
export const createChild = <ThrowOnError extends boolean = false>(options: Options<CreateChildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChildResponse, CreateChildError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Child
 */
export const updateChild = <ThrowOnError extends boolean = false>(options: Options<UpdateChildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateChildResponse, UpdateChildError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Child
 */
export const deleteChild = <ThrowOnError extends boolean = false>(options: Options<DeleteChildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteChildError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children/{child_id}',
        ...options
    });
};

/**
 * Get Child
 */
export const getChild = <ThrowOnError extends boolean = false>(options: Options<GetChildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChildResponse, GetChildError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children/{child_id}',
        ...options
    });
};

/**
 * Delete Child Image
 */
export const deleteChildImage = <ThrowOnError extends boolean = false>(options: Options<DeleteChildImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteChildImageError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children-images/{child_id}',
        ...options
    });
};

/**
 * Get Child Image
 */
export const getChildImage = <ThrowOnError extends boolean = false>(options: Options<GetChildImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetChildImageError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children-images/{child_id}',
        ...options
    });
};

/**
 * Upload Child Image
 */
export const uploadChildImage = <ThrowOnError extends boolean = false>(options: Options<UploadChildImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UploadChildImageError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children-images/{child_id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get Current Milestone Answer Session
 */
export const getCurrentMilestoneAnswerSession = <ThrowOnError extends boolean = false>(options: Options<GetCurrentMilestoneAnswerSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCurrentMilestoneAnswerSessionResponse, GetCurrentMilestoneAnswerSessionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/milestone-answers/{child_id}',
        ...options
    });
};

/**
 * Update Milestone Answer
 */
export const updateMilestoneAnswer = <ThrowOnError extends boolean = false>(options: Options<UpdateMilestoneAnswerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMilestoneAnswerResponse, UpdateMilestoneAnswerError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/milestone-answers/{milestone_answer_session_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Current User Answers
 */
export const getCurrentUserAnswers = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserAnswersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserAnswersResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/user-answers/',
        ...options
    });
};

/**
 * Update Current User Answers
 */
export const updateCurrentUserAnswers = <ThrowOnError extends boolean = false>(options: Options<UpdateCurrentUserAnswersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCurrentUserAnswersResponse, UpdateCurrentUserAnswersError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/user-answers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Current Child Answers
 */
export const getCurrentChildAnswers = <ThrowOnError extends boolean = false>(options: Options<GetCurrentChildAnswersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCurrentChildAnswersResponse, GetCurrentChildAnswersError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children-answers/{child_id}',
        ...options
    });
};

/**
 * Update Current Child Answers
 */
export const updateCurrentChildAnswers = <ThrowOnError extends boolean = false>(options: Options<UpdateCurrentChildAnswersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateCurrentChildAnswersError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/children-answers/{child_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Expired Milestone Answer Sessions
 */
export const getExpiredMilestoneAnswerSessions = <ThrowOnError extends boolean = false>(options: Options<GetExpiredMilestoneAnswerSessionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExpiredMilestoneAnswerSessionsResponse, GetExpiredMilestoneAnswerSessionsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/users/milestone-answers-sessions/{child_id}',
        ...options
    });
};

/**
 * Get Milestonegroups For Session
 */
export const getMilestonegroupsForSession = <ThrowOnError extends boolean = false>(options: Options<GetMilestonegroupsForSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMilestonegroupsForSessionResponse, GetMilestonegroupsForSessionError, ThrowOnError>({
        url: '/users/feedback/answersession={answersession_id}',
        ...options
    });
};

/**
 * Get Summary Feedback For Answersession
 */
export const getSummaryFeedbackForAnswersession = <ThrowOnError extends boolean = false>(options: Options<GetSummaryFeedbackForAnswersessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSummaryFeedbackForAnswersessionResponse, GetSummaryFeedbackForAnswersessionError, ThrowOnError>({
        url: '/users/feedback/answersession={answersession_id}/summary',
        ...options
    });
};

/**
 * Get Detailed Feedback For Answersession
 */
export const getDetailedFeedbackForAnswersession = <ThrowOnError extends boolean = false>(options: Options<GetDetailedFeedbackForAnswersessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDetailedFeedbackForAnswersessionResponse, GetDetailedFeedbackForAnswersessionError, ThrowOnError>({
        url: '/users/feedback/answersession={answersession_id}/detailed',
        ...options
    });
};

/**
 * Auth:Cookie.Login
 */
export const authCookieLogin = <ThrowOnError extends boolean = false>(options: Options<AuthCookieLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthCookieLoginResponse, AuthCookieLoginError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Auth:Cookie.Logout
 */
export const authCookieLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthCookieLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthCookieLogoutResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

/**
 * Register:Register
 */
export const registerRegister = <ThrowOnError extends boolean = false>(options: Options<RegisterRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterRegisterResponse, RegisterRegisterError, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPassword = <ThrowOnError extends boolean = false>(options: Options<ResetForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ResetForgotPasswordError, ThrowOnError>({
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset:Reset Password
 */
export const resetResetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ResetResetPasswordError, ThrowOnError>({
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify:Request-Token
 */
export const verifyRequestToken = <ThrowOnError extends boolean = false>(options: Options<VerifyRequestTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, VerifyRequestTokenError, ThrowOnError>({
        url: '/auth/request-verify-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify:Verify
 */
export const verifyVerify = <ThrowOnError extends boolean = false>(options: Options<VerifyVerifyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyVerifyResponse, VerifyVerifyError, ThrowOnError>({
        url: '/auth/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Research Data
 */
export const getResearchData = <ThrowOnError extends boolean = false>(options?: Options<GetResearchDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/research/data/',
        ...options
    });
};

/**
 * Get Research Data Csv
 */
export const getResearchDataCsv = <ThrowOnError extends boolean = false>(options?: Options<GetResearchDataCsvData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/research/data/csv',
        ...options
    });
};

/**
 * Get Research Names
 */
export const getResearchNames = <ThrowOnError extends boolean = false>(options?: Options<GetResearchNamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResearchNamesResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'fastapiusersauth',
                type: 'apiKey'
            }
        ],
        url: '/research/names/',
        ...options
    });
};