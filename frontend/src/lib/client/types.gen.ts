// This file is auto-generated by @hey-api/openapi-ts

export type AdminSettingsPublic = {
    hide_milestone_feedback: boolean;
    hide_milestone_group_feedback: boolean;
    hide_all_feedback: boolean;
};

export type AdminSettingsUpdate = {
    hide_milestone_feedback?: boolean | null;
    hide_milestone_group_feedback?: boolean | null;
    hide_all_feedback?: boolean | null;
};

export type BodyAuthCookieLoginAuthLoginPost = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type BodyImportCsvDataAdminResearchImportCsvPost = {
    /**
     * Additional data CSV file
     */
    additional_data_file: Blob | File;
    /**
     * Labels CSV file
     */
    labels_file?: Blob | File;
};

export type BodyResetForgotPasswordAuthForgotPasswordPost = {
    email: string;
};

export type BodyResetResetPasswordAuthResetPasswordPost = {
    token: string;
    password: string;
};

export type BodySubmitMilestoneImageSubmittedMilestoneImagesMilestoneIdPost = {
    file: Blob | File;
};

export type BodyUploadChildImageUsersChildrenImagesChildIdPut = {
    file: Blob | File;
};

export type BodyUploadMilestoneGroupImageAdminMilestoneGroupImagesMilestoneGroupIdPut = {
    file: Blob | File;
};

export type BodyUploadMilestoneImageAdminMilestoneImagesMilestoneIdPost = {
    file: Blob | File;
};

export type BodyVerifyRequestTokenAuthRequestVerifyTokenPost = {
    email: string;
};

export type BodyVerifyVerifyAuthVerifyPost = {
    token: string;
};

export type ChildAnswerPublic = {
    answer: string;
    additional_answer: string | null;
    question_id: number;
};

export type ChildCreate = {
    name?: string;
    birth_year: number;
    birth_month: number;
    color?: string | null;
};

export type ChildPublic = {
    name?: string;
    birth_year: number;
    birth_month: number;
    color?: string | null;
    id: number;
    has_image: boolean;
};

export type ChildQuestionAdmin = {
    order?: number;
    component?: string;
    type?: string;
    options?: string;
    additional_option?: string;
    required?: boolean;
    name?: string;
    visibility?: boolean;
    id: number;
    text?: {
        [key: string]: ChildQuestionText;
    };
};

export type ChildQuestionPublic = {
    id: number;
    component?: string;
    type?: string;
    text?: {
        [key: string]: QuestionTextPublic;
    };
    additional_option?: string;
    required?: boolean;
    name?: string;
};

export type ChildQuestionText = {
    question?: string;
    options_json?: string;
    options?: string;
    child_question_id?: number | null;
    lang_id?: string | null;
};

export type ChildSummaryPublic = {
    name?: string;
    birth_year: number;
    birth_month: number;
    color?: string | null;
    id: number;
    has_image: boolean;
    active_answer_session: boolean;
    session_progress: number;
    session_remaining_seconds: number;
};

export type DeleteResponse = {
    ok: boolean;
    dry_run: boolean;
    children: {
        [key: string]: number;
    };
    /**
     * Error message when present
     */
    error?: string | null;
};

export type ErrorModel = {
    detail: string | {
        [key: string]: string;
    };
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemOrder = {
    id: number;
    order: number;
};

export type Language = {
    id: string;
};

export type MilestoneAdmin = {
    id: number;
    group_id: number;
    order: number;
    expected_age_months: number;
    expected_age_delta: number;
    text: {
        [key: string]: MilestoneText;
    };
    images: Array<MilestoneImage>;
    name: string;
};

export type MilestoneAgeScore = {
    milestone_id?: number | null;
    age: number;
    c0: number;
    c1: number;
    c2: number;
    c3: number;
};

export type MilestoneAgeScoreCollectionPublic = {
    milestone_id: number;
    expected_age: number;
    expected_age_delta: number;
    scores: Array<MilestoneAgeScore>;
};

export type MilestoneAnswerAnalysis = {
    milestone_id: number;
    answer: number;
    avg_answer: number;
    stddev_answer: number;
};

export type MilestoneAnswerPublic = {
    milestone_id: number;
    answer: number;
};

export type MilestoneAnswerResponse = {
    answer: MilestoneAnswerPublic;
    session_completed: boolean;
};

export type MilestoneAnswerSession = {
    id?: number | null;
    child_id: number;
    user_id: number;
    created_at: string;
    expired: boolean;
    completed: boolean;
    included_in_statistics: boolean;
    suspicious_state?: string;
};

export type MilestoneAnswerSessionAnalysis = {
    child_age: number;
    rms: number;
    answers: Array<MilestoneAnswerAnalysis>;
};

export type MilestoneAnswerSessionPublic = {
    id: number;
    child_id: number;
    created_at: string;
    answers: {
        [key: string]: MilestoneAnswerPublic;
    };
};

export type MilestoneGroupAdmin = {
    id: number;
    order: number;
    text: {
        [key: string]: MilestoneGroupText;
    };
    milestones: Array<MilestoneAdmin>;
};

export type MilestoneGroupPublic = {
    id: number;
    text: {
        [key: string]: MilestoneGroupTextPublic;
    };
    milestones: Array<MilestonePublic>;
};

export type MilestoneGroupText = {
    title?: string;
    desc?: string;
    group_id?: number | null;
    lang_id?: string | null;
};

export type MilestoneGroupTextPublic = {
    title?: string;
    desc?: string;
};

export type MilestoneImage = {
    id?: number | null;
    milestone_id?: number | null;
};

export type MilestoneImagePublic = {
    id: number;
};

export type MilestonePublic = {
    id: number;
    text: {
        [key: string]: MilestoneTextPublic;
    };
    images: Array<MilestoneImagePublic>;
    name: string;
};

export type MilestoneText = {
    title?: string;
    desc?: string;
    obs?: string;
    help?: string;
    importance?: string;
    milestone_id?: number | null;
    lang_id?: string | null;
};

export type MilestoneTextPublic = {
    title?: string;
    desc?: string;
    obs?: string;
    help?: string;
    importance?: string;
};

export type QuestionTextPublic = {
    question?: string;
    options_json?: string;
    options?: string;
};

export type ResearchGroup = {
    id: number;
};

export type SubmittedMilestoneImagePublic = {
    id: number;
    milestone_id: number;
    user_id: number;
};

export type UserAnswerPublic = {
    answer: string;
    additional_answer: string | null;
    question_id: number;
};

export type UserCreate = {
    email: string;
    password: string;
    is_active?: boolean | null;
    is_superuser?: boolean | null;
    is_verified?: boolean | null;
    is_researcher?: boolean | null;
    full_data_access?: boolean | null;
    research_group_id?: number | null;
};

export type UserQuestionAdmin = {
    order?: number;
    component?: string;
    type?: string;
    options?: string;
    additional_option?: string;
    required?: boolean;
    name?: string;
    visibility?: boolean;
    id: number;
    text?: {
        [key: string]: UserQuestionText;
    };
};

export type UserQuestionPublic = {
    id: number;
    component?: string;
    type?: string;
    text?: {
        [key: string]: QuestionTextPublic;
    };
    additional_option?: string;
    required?: boolean;
    name?: string;
};

export type UserQuestionText = {
    question?: string;
    options_json?: string;
    options?: string;
    user_question_id?: number | null;
    lang_id?: string | null;
};

export type UserRead = {
    id: number;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
    is_researcher: boolean;
    full_data_access: boolean;
    research_group_id: number;
};

export type UserUpdate = {
    password?: string | null;
    email?: string | null;
    is_active?: boolean | null;
    is_superuser?: boolean | null;
    is_verified?: boolean | null;
    is_researcher?: boolean | null;
    full_data_access?: boolean | null;
    research_group_id?: number | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type GetLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/languages/';
};

export type GetLanguagesResponses = {
    /**
     * Successful Response
     */
    200: Array<string>;
};

export type GetLanguagesResponse = GetLanguagesResponses[keyof GetLanguagesResponses];

export type GetMilestonesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/milestones/';
};

export type GetMilestonesResponses = {
    /**
     * Successful Response
     */
    200: Array<MilestonePublic>;
};

export type GetMilestonesResponse = GetMilestonesResponses[keyof GetMilestonesResponses];

export type GetMilestoneData = {
    body?: never;
    path: {
        milestone_id: number;
    };
    query?: never;
    url: '/milestones/{milestone_id}';
};

export type GetMilestoneErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMilestoneError = GetMilestoneErrors[keyof GetMilestoneErrors];

export type GetMilestoneResponses = {
    /**
     * Successful Response
     */
    200: MilestonePublic;
};

export type GetMilestoneResponse = GetMilestoneResponses[keyof GetMilestoneResponses];

export type GetMilestoneGroupsData = {
    body?: never;
    path: {
        child_id: number;
    };
    query?: never;
    url: '/milestone-groups/{child_id}';
};

export type GetMilestoneGroupsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMilestoneGroupsError = GetMilestoneGroupsErrors[keyof GetMilestoneGroupsErrors];

export type GetMilestoneGroupsResponses = {
    /**
     * Successful Response
     */
    200: Array<MilestoneGroupPublic>;
};

export type GetMilestoneGroupsResponse = GetMilestoneGroupsResponses[keyof GetMilestoneGroupsResponses];

export type SubmitMilestoneImageData = {
    body: BodySubmitMilestoneImageSubmittedMilestoneImagesMilestoneIdPost;
    path: {
        milestone_id: number;
    };
    query?: never;
    url: '/submitted-milestone-images/{milestone_id}';
};

export type SubmitMilestoneImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SubmitMilestoneImageError = SubmitMilestoneImageErrors[keyof SubmitMilestoneImageErrors];

export type SubmitMilestoneImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetUserQuestionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user-questions/';
};

export type GetUserQuestionsResponses = {
    /**
     * Successful Response
     */
    200: Array<UserQuestionPublic>;
};

export type GetUserQuestionsResponse = GetUserQuestionsResponses[keyof GetUserQuestionsResponses];

export type GetChildQuestionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/child-questions/';
};

export type GetChildQuestionsResponses = {
    /**
     * Successful Response
     */
    200: Array<ChildQuestionPublic>;
};

export type GetChildQuestionsResponse = GetChildQuestionsResponses[keyof GetChildQuestionsResponses];

export type CreateLanguageData = {
    body: Language;
    path?: never;
    query?: never;
    url: '/admin/languages/';
};

export type CreateLanguageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateLanguageError = CreateLanguageErrors[keyof CreateLanguageErrors];

export type CreateLanguageResponses = {
    /**
     * Successful Response
     */
    200: Language;
};

export type CreateLanguageResponse = CreateLanguageResponses[keyof CreateLanguageResponses];

export type DeleteLanguageData = {
    body?: never;
    path: {
        language_id: string;
    };
    query?: never;
    url: '/admin/languages/{language_id}';
};

export type DeleteLanguageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteLanguageError = DeleteLanguageErrors[keyof DeleteLanguageErrors];

export type DeleteLanguageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateI18nData = {
    body: {
        [key: string]: {
            [key: string]: string;
        };
    };
    path: {
        language_id: string;
    };
    query?: never;
    url: '/admin/i18n/{language_id}';
};

export type UpdateI18nErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateI18nError = UpdateI18nErrors[keyof UpdateI18nErrors];

export type UpdateI18nResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TranslateData = {
    body?: never;
    path?: never;
    query: {
        text: string;
        locale: string;
        source_lang?: string;
    };
    url: '/admin/translate/';
};

export type TranslateErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TranslateError = TranslateErrors[keyof TranslateErrors];

export type TranslateResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type TranslateResponse = TranslateResponses[keyof TranslateResponses];

export type GetMilestoneGroupsAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/milestone-groups/';
};

export type GetMilestoneGroupsAdminResponses = {
    /**
     * Successful Response
     */
    200: Array<MilestoneGroupAdmin>;
};

export type GetMilestoneGroupsAdminResponse = GetMilestoneGroupsAdminResponses[keyof GetMilestoneGroupsAdminResponses];

export type CreateMilestoneGroupAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/milestone-groups/';
};

export type CreateMilestoneGroupAdminResponses = {
    /**
     * Successful Response
     */
    200: MilestoneGroupAdmin;
};

export type CreateMilestoneGroupAdminResponse = CreateMilestoneGroupAdminResponses[keyof CreateMilestoneGroupAdminResponses];

export type UpdateMilestoneGroupAdminData = {
    body: MilestoneGroupAdmin;
    path?: never;
    query?: never;
    url: '/admin/milestone-groups';
};

export type UpdateMilestoneGroupAdminErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMilestoneGroupAdminError = UpdateMilestoneGroupAdminErrors[keyof UpdateMilestoneGroupAdminErrors];

export type UpdateMilestoneGroupAdminResponses = {
    /**
     * Successful Response
     */
    200: MilestoneGroupAdmin;
};

export type UpdateMilestoneGroupAdminResponse = UpdateMilestoneGroupAdminResponses[keyof UpdateMilestoneGroupAdminResponses];

export type DeleteMilestoneGroupAdminData = {
    body?: never;
    path: {
        milestone_group_id: number;
    };
    query?: {
        /**
         * When true, shows what would be deleted without actually deleting
         */
        dry_run?: boolean;
    };
    url: '/admin/milestone-groups/{milestone_group_id}';
};

export type DeleteMilestoneGroupAdminErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMilestoneGroupAdminError = DeleteMilestoneGroupAdminErrors[keyof DeleteMilestoneGroupAdminErrors];

export type DeleteMilestoneGroupAdminResponses = {
    /**
     * Successful Response
     */
    200: DeleteResponse;
};

export type DeleteMilestoneGroupAdminResponse = DeleteMilestoneGroupAdminResponses[keyof DeleteMilestoneGroupAdminResponses];

export type OrderMilestoneGroupsAdminData = {
    body: Array<ItemOrder>;
    path?: never;
    query?: never;
    url: '/admin/milestone-groups/order/';
};

export type OrderMilestoneGroupsAdminErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OrderMilestoneGroupsAdminError = OrderMilestoneGroupsAdminErrors[keyof OrderMilestoneGroupsAdminErrors];

export type OrderMilestoneGroupsAdminResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UploadMilestoneGroupImageData = {
    body: BodyUploadMilestoneGroupImageAdminMilestoneGroupImagesMilestoneGroupIdPut;
    path: {
        milestone_group_id: number;
    };
    query?: never;
    url: '/admin/milestone-group-images/{milestone_group_id}';
};

export type UploadMilestoneGroupImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadMilestoneGroupImageError = UploadMilestoneGroupImageErrors[keyof UploadMilestoneGroupImageErrors];

export type UploadMilestoneGroupImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateMilestoneData = {
    body?: never;
    path: {
        milestone_group_id: number;
    };
    query?: never;
    url: '/admin/milestones/{milestone_group_id}';
};

export type CreateMilestoneErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateMilestoneError = CreateMilestoneErrors[keyof CreateMilestoneErrors];

export type CreateMilestoneResponses = {
    /**
     * Successful Response
     */
    200: MilestoneAdmin;
};

export type CreateMilestoneResponse = CreateMilestoneResponses[keyof CreateMilestoneResponses];

export type UpdateMilestoneData = {
    body: MilestoneAdmin;
    path?: never;
    query?: never;
    url: '/admin/milestones/';
};

export type UpdateMilestoneErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMilestoneError = UpdateMilestoneErrors[keyof UpdateMilestoneErrors];

export type UpdateMilestoneResponses = {
    /**
     * Successful Response
     */
    200: MilestoneAdmin;
};

export type UpdateMilestoneResponse = UpdateMilestoneResponses[keyof UpdateMilestoneResponses];

export type DeleteMilestoneData = {
    body?: never;
    path: {
        milestone_id: number;
    };
    query?: {
        /**
         * When true, shows what would be deleted without actually deleting
         */
        dry_run?: boolean;
    };
    url: '/admin/milestones/{milestone_id}';
};

export type DeleteMilestoneErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMilestoneError = DeleteMilestoneErrors[keyof DeleteMilestoneErrors];

export type DeleteMilestoneResponses = {
    /**
     * Successful Response
     */
    200: DeleteResponse;
};

export type DeleteMilestoneResponse = DeleteMilestoneResponses[keyof DeleteMilestoneResponses];

export type OrderMilestonesAdminData = {
    body: Array<ItemOrder>;
    path?: never;
    query?: never;
    url: '/admin/milestones/order/';
};

export type OrderMilestonesAdminErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OrderMilestonesAdminError = OrderMilestonesAdminErrors[keyof OrderMilestonesAdminErrors];

export type OrderMilestonesAdminResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UploadMilestoneImageData = {
    body: BodyUploadMilestoneImageAdminMilestoneImagesMilestoneIdPost;
    path: {
        milestone_id: number;
    };
    query?: never;
    url: '/admin/milestone-images/{milestone_id}';
};

export type UploadMilestoneImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadMilestoneImageError = UploadMilestoneImageErrors[keyof UploadMilestoneImageErrors];

export type UploadMilestoneImageResponses = {
    /**
     * Successful Response
     */
    200: MilestoneImage;
};

export type UploadMilestoneImageResponse = UploadMilestoneImageResponses[keyof UploadMilestoneImageResponses];

export type DeleteMilestoneImageData = {
    body?: never;
    path: {
        milestone_image_id: number;
    };
    query?: never;
    url: '/admin/milestone-images/{milestone_image_id}';
};

export type DeleteMilestoneImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMilestoneImageError = DeleteMilestoneImageErrors[keyof DeleteMilestoneImageErrors];

export type DeleteMilestoneImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSubmittedMilestoneImagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/submitted-milestone-images/';
};

export type GetSubmittedMilestoneImagesResponses = {
    /**
     * Successful Response
     */
    200: Array<SubmittedMilestoneImagePublic>;
};

export type GetSubmittedMilestoneImagesResponse = GetSubmittedMilestoneImagesResponses[keyof GetSubmittedMilestoneImagesResponses];

export type ApproveSubmittedMilestoneImageData = {
    body?: never;
    path: {
        submitted_milestone_image_id: number;
    };
    query?: never;
    url: '/admin/submitted-milestone-images/approve/{submitted_milestone_image_id}';
};

export type ApproveSubmittedMilestoneImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ApproveSubmittedMilestoneImageError = ApproveSubmittedMilestoneImageErrors[keyof ApproveSubmittedMilestoneImageErrors];

export type ApproveSubmittedMilestoneImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteSubmittedMilestoneImageData = {
    body?: never;
    path: {
        submitted_milestone_image_id: number;
    };
    query?: never;
    url: '/admin/submitted-milestone-images/{submitted_milestone_image_id}';
};

export type DeleteSubmittedMilestoneImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSubmittedMilestoneImageError = DeleteSubmittedMilestoneImageErrors[keyof DeleteSubmittedMilestoneImageErrors];

export type DeleteSubmittedMilestoneImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMilestoneAgeScoresData = {
    body?: never;
    path: {
        milestone_id: number;
    };
    query?: never;
    url: '/admin/milestone-age-scores/{milestone_id}';
};

export type GetMilestoneAgeScoresErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMilestoneAgeScoresError = GetMilestoneAgeScoresErrors[keyof GetMilestoneAgeScoresErrors];

export type GetMilestoneAgeScoresResponses = {
    /**
     * Successful Response
     */
    200: MilestoneAgeScoreCollectionPublic;
};

export type GetMilestoneAgeScoresResponse = GetMilestoneAgeScoresResponses[keyof GetMilestoneAgeScoresResponses];

export type AdminUpdateStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/update-stats/';
};

export type AdminUpdateStatsResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type AdminUpdateStatsResponse = AdminUpdateStatsResponses[keyof AdminUpdateStatsResponses];

export type GetMilestoneAnswerSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/milestone-answer-sessions/';
};

export type GetMilestoneAnswerSessionsResponses = {
    /**
     * Successful Response
     */
    200: Array<MilestoneAnswerSession>;
};

export type GetMilestoneAnswerSessionsResponse = GetMilestoneAnswerSessionsResponses[keyof GetMilestoneAnswerSessionsResponses];

export type ModifyMilestoneAnswerSessionData = {
    body?: never;
    path: {
        answer_session_id: number;
    };
    query: {
        suspicious: boolean;
    };
    url: '/admin/milestone-answer-sessions/{answer_session_id}';
};

export type ModifyMilestoneAnswerSessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ModifyMilestoneAnswerSessionError = ModifyMilestoneAnswerSessionErrors[keyof ModifyMilestoneAnswerSessionErrors];

export type ModifyMilestoneAnswerSessionResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMilestoneAnswerSessionAnalysisData = {
    body?: never;
    path: {
        answer_session_id: number;
    };
    query?: never;
    url: '/admin/milestone-answer-session-analysis/{answer_session_id}';
};

export type GetMilestoneAnswerSessionAnalysisErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMilestoneAnswerSessionAnalysisError = GetMilestoneAnswerSessionAnalysisErrors[keyof GetMilestoneAnswerSessionAnalysisErrors];

export type GetMilestoneAnswerSessionAnalysisResponses = {
    /**
     * Successful Response
     */
    200: MilestoneAnswerSessionAnalysis;
};

export type GetMilestoneAnswerSessionAnalysisResponse = GetMilestoneAnswerSessionAnalysisResponses[keyof GetMilestoneAnswerSessionAnalysisResponses];

export type GetUserQuestionsAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/user-questions/';
};

export type GetUserQuestionsAdminResponses = {
    /**
     * Successful Response
     */
    200: Array<UserQuestionAdmin>;
};

export type GetUserQuestionsAdminResponse = GetUserQuestionsAdminResponses[keyof GetUserQuestionsAdminResponses];

export type CreateUserQuestionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/user-questions/';
};

export type CreateUserQuestionResponses = {
    /**
     * Successful Response
     */
    200: UserQuestionAdmin;
};

export type CreateUserQuestionResponse = CreateUserQuestionResponses[keyof CreateUserQuestionResponses];

export type UpdateUserQuestionData = {
    body: UserQuestionAdmin;
    path?: never;
    query?: never;
    url: '/admin/user-questions/';
};

export type UpdateUserQuestionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserQuestionError = UpdateUserQuestionErrors[keyof UpdateUserQuestionErrors];

export type UpdateUserQuestionResponses = {
    /**
     * Successful Response
     */
    200: UserQuestionAdmin;
};

export type UpdateUserQuestionResponse = UpdateUserQuestionResponses[keyof UpdateUserQuestionResponses];

export type DeleteUserQuestionData = {
    body?: never;
    path: {
        user_question_id: number;
    };
    query?: {
        /**
         * When true, shows what would be deleted without actually deleting
         */
        dry_run?: boolean;
    };
    url: '/admin/user-questions/{user_question_id}';
};

export type DeleteUserQuestionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserQuestionError = DeleteUserQuestionErrors[keyof DeleteUserQuestionErrors];

export type DeleteUserQuestionResponses = {
    /**
     * Successful Response
     */
    200: DeleteResponse;
};

export type DeleteUserQuestionResponse = DeleteUserQuestionResponses[keyof DeleteUserQuestionResponses];

export type OrderUserQuestionsAdminData = {
    body: Array<ItemOrder>;
    path?: never;
    query?: never;
    url: '/admin/user-questions/order/';
};

export type OrderUserQuestionsAdminErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OrderUserQuestionsAdminError = OrderUserQuestionsAdminErrors[keyof OrderUserQuestionsAdminErrors];

export type OrderUserQuestionsAdminResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetChildQuestionsAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/child-questions/';
};

export type GetChildQuestionsAdminResponses = {
    /**
     * Successful Response
     */
    200: Array<ChildQuestionAdmin>;
};

export type GetChildQuestionsAdminResponse = GetChildQuestionsAdminResponses[keyof GetChildQuestionsAdminResponses];

export type CreateChildQuestionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/child-questions/';
};

export type CreateChildQuestionResponses = {
    /**
     * Successful Response
     */
    200: ChildQuestionAdmin;
};

export type CreateChildQuestionResponse = CreateChildQuestionResponses[keyof CreateChildQuestionResponses];

export type UpdateChildQuestionData = {
    body: ChildQuestionAdmin;
    path?: never;
    query?: never;
    url: '/admin/child-questions/';
};

export type UpdateChildQuestionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateChildQuestionError = UpdateChildQuestionErrors[keyof UpdateChildQuestionErrors];

export type UpdateChildQuestionResponses = {
    /**
     * Successful Response
     */
    200: ChildQuestionAdmin;
};

export type UpdateChildQuestionResponse = UpdateChildQuestionResponses[keyof UpdateChildQuestionResponses];

export type DeleteChildQuestionData = {
    body?: never;
    path: {
        child_question_id: number;
    };
    query?: {
        /**
         * When true, shows what would be deleted without actually deleting
         */
        dry_run?: boolean;
    };
    url: '/admin/child-questions/{child_question_id}';
};

export type DeleteChildQuestionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteChildQuestionError = DeleteChildQuestionErrors[keyof DeleteChildQuestionErrors];

export type DeleteChildQuestionResponses = {
    /**
     * Successful Response
     */
    200: DeleteResponse;
};

export type DeleteChildQuestionResponse = DeleteChildQuestionResponses[keyof DeleteChildQuestionResponses];

export type OrderChildQuestionsAdminData = {
    body: Array<ItemOrder>;
    path?: never;
    query?: never;
    url: '/admin/child-questions/order/';
};

export type OrderChildQuestionsAdminErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OrderChildQuestionsAdminError = OrderChildQuestionsAdminErrors[keyof OrderChildQuestionsAdminErrors];

export type OrderChildQuestionsAdminResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAdminSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/settings/';
};

export type GetAdminSettingsResponses = {
    /**
     * Successful Response
     */
    200: AdminSettingsPublic;
};

export type GetAdminSettingsResponse = GetAdminSettingsResponses[keyof GetAdminSettingsResponses];

export type UpdateAdminSettingsData = {
    body: AdminSettingsUpdate;
    path?: never;
    query?: never;
    url: '/admin/settings/';
};

export type UpdateAdminSettingsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateAdminSettingsError = UpdateAdminSettingsErrors[keyof UpdateAdminSettingsErrors];

export type UpdateAdminSettingsResponses = {
    /**
     * Successful Response
     */
    200: AdminSettingsPublic;
};

export type UpdateAdminSettingsResponse = UpdateAdminSettingsResponses[keyof UpdateAdminSettingsResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/users/';
};

export type GetUsersResponses = {
    /**
     * Successful Response
     */
    200: Array<UserRead>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type GetResearchGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/research-groups/';
};

export type GetResearchGroupsResponses = {
    /**
     * Successful Response
     */
    200: Array<ResearchGroup>;
};

export type GetResearchGroupsResponse = GetResearchGroupsResponses[keyof GetResearchGroupsResponses];

export type CreateResearchGroupData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/admin/research-groups/{user_id}';
};

export type CreateResearchGroupErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateResearchGroupError = CreateResearchGroupErrors[keyof CreateResearchGroupErrors];

export type CreateResearchGroupResponses = {
    /**
     * Successful Response
     */
    200: ResearchGroup;
};

export type CreateResearchGroupResponse = CreateResearchGroupResponses[keyof CreateResearchGroupResponses];

export type DeleteResearchGroupData = {
    body?: never;
    path: {
        research_group_id: number;
    };
    query?: never;
    url: '/admin/research-groups/{research_group_id}';
};

export type DeleteResearchGroupErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteResearchGroupError = DeleteResearchGroupErrors[keyof DeleteResearchGroupErrors];

export type DeleteResearchGroupResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ImportCsvDataData = {
    body: BodyImportCsvDataAdminResearchImportCsvPost;
    path?: never;
    query?: never;
    url: '/admin/research/import-csv/';
};

export type ImportCsvDataErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ImportCsvDataError = ImportCsvDataErrors[keyof ImportCsvDataErrors];

export type ImportCsvDataResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UsersCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersCurrentUserErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
};

export type UsersCurrentUserResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersCurrentUserResponse = UsersCurrentUserResponses[keyof UsersCurrentUserResponses];

export type UsersPatchCurrentUserData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersPatchCurrentUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersPatchCurrentUserError = UsersPatchCurrentUserErrors[keyof UsersPatchCurrentUserErrors];

export type UsersPatchCurrentUserResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersPatchCurrentUserResponse = UsersPatchCurrentUserResponses[keyof UsersPatchCurrentUserResponses];

export type UsersDeleteUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersDeleteUserErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserError = UsersDeleteUserErrors[keyof UsersDeleteUserErrors];

export type UsersDeleteUserResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type UsersDeleteUserResponse = UsersDeleteUserResponses[keyof UsersDeleteUserResponses];

export type UsersUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersUserErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUserError = UsersUserErrors[keyof UsersUserErrors];

export type UsersUserResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersUserResponse = UsersUserResponses[keyof UsersUserResponses];

export type UsersPatchUserData = {
    body: UserUpdate;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersPatchUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersPatchUserError = UsersPatchUserErrors[keyof UsersPatchUserErrors];

export type UsersPatchUserResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersPatchUserResponse = UsersPatchUserResponses[keyof UsersPatchUserResponses];

export type GetChildrenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/children/';
};

export type GetChildrenResponses = {
    /**
     * Successful Response
     */
    200: Array<ChildSummaryPublic>;
};

export type GetChildrenResponse = GetChildrenResponses[keyof GetChildrenResponses];

export type CreateChildData = {
    body: ChildCreate;
    path?: never;
    query?: never;
    url: '/users/children/';
};

export type CreateChildErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateChildError = CreateChildErrors[keyof CreateChildErrors];

export type CreateChildResponses = {
    /**
     * Successful Response
     */
    200: ChildPublic;
};

export type CreateChildResponse = CreateChildResponses[keyof CreateChildResponses];

export type UpdateChildData = {
    body: ChildPublic;
    path?: never;
    query?: never;
    url: '/users/children/';
};

export type UpdateChildErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateChildError = UpdateChildErrors[keyof UpdateChildErrors];

export type UpdateChildResponses = {
    /**
     * Successful Response
     */
    200: ChildPublic;
};

export type UpdateChildResponse = UpdateChildResponses[keyof UpdateChildResponses];

export type DeleteChildData = {
    body?: never;
    path: {
        child_id: number;
    };
    query?: {
        /**
         * When true, shows what would be deleted without actually deleting
         */
        dry_run?: boolean;
    };
    url: '/users/children/{child_id}';
};

export type DeleteChildErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteChildError = DeleteChildErrors[keyof DeleteChildErrors];

export type DeleteChildResponses = {
    /**
     * Successful Response
     */
    200: DeleteResponse;
};

export type DeleteChildResponse = DeleteChildResponses[keyof DeleteChildResponses];

export type GetChildData = {
    body?: never;
    path: {
        child_id: number;
    };
    query?: never;
    url: '/users/children/{child_id}';
};

export type GetChildErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChildError = GetChildErrors[keyof GetChildErrors];

export type GetChildResponses = {
    /**
     * Successful Response
     */
    200: ChildPublic;
};

export type GetChildResponse = GetChildResponses[keyof GetChildResponses];

export type DeleteChildImageData = {
    body?: never;
    path: {
        child_id: number;
    };
    query?: never;
    url: '/users/children-images/{child_id}';
};

export type DeleteChildImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteChildImageError = DeleteChildImageErrors[keyof DeleteChildImageErrors];

export type DeleteChildImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetChildImageData = {
    body?: never;
    path: {
        child_id: number;
    };
    query?: never;
    url: '/users/children-images/{child_id}';
};

export type GetChildImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChildImageError = GetChildImageErrors[keyof GetChildImageErrors];

export type GetChildImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UploadChildImageData = {
    body: BodyUploadChildImageUsersChildrenImagesChildIdPut;
    path: {
        child_id: number;
    };
    query?: never;
    url: '/users/children-images/{child_id}';
};

export type UploadChildImageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadChildImageError = UploadChildImageErrors[keyof UploadChildImageErrors];

export type UploadChildImageResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCurrentMilestoneAnswerSessionData = {
    body?: never;
    path: {
        child_id: number;
    };
    query?: never;
    url: '/users/milestone-answers/{child_id}';
};

export type GetCurrentMilestoneAnswerSessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCurrentMilestoneAnswerSessionError = GetCurrentMilestoneAnswerSessionErrors[keyof GetCurrentMilestoneAnswerSessionErrors];

export type GetCurrentMilestoneAnswerSessionResponses = {
    /**
     * Successful Response
     */
    200: MilestoneAnswerSessionPublic;
};

export type GetCurrentMilestoneAnswerSessionResponse = GetCurrentMilestoneAnswerSessionResponses[keyof GetCurrentMilestoneAnswerSessionResponses];

export type UpdateMilestoneAnswerData = {
    body: MilestoneAnswerPublic;
    path: {
        milestone_answer_session_id: number;
    };
    query?: never;
    url: '/users/milestone-answers/{milestone_answer_session_id}';
};

export type UpdateMilestoneAnswerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMilestoneAnswerError = UpdateMilestoneAnswerErrors[keyof UpdateMilestoneAnswerErrors];

export type UpdateMilestoneAnswerResponses = {
    /**
     * Successful Response
     */
    200: MilestoneAnswerResponse;
};

export type UpdateMilestoneAnswerResponse = UpdateMilestoneAnswerResponses[keyof UpdateMilestoneAnswerResponses];

export type GetCurrentUserAnswersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/user-answers/';
};

export type GetCurrentUserAnswersResponses = {
    /**
     * Successful Response
     */
    200: Array<UserAnswerPublic>;
};

export type GetCurrentUserAnswersResponse = GetCurrentUserAnswersResponses[keyof GetCurrentUserAnswersResponses];

export type UpdateCurrentUserAnswersData = {
    body: Array<UserAnswerPublic>;
    path?: never;
    query?: never;
    url: '/users/user-answers/';
};

export type UpdateCurrentUserAnswersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCurrentUserAnswersError = UpdateCurrentUserAnswersErrors[keyof UpdateCurrentUserAnswersErrors];

export type UpdateCurrentUserAnswersResponses = {
    /**
     * Successful Response
     */
    200: Array<UserAnswerPublic>;
};

export type UpdateCurrentUserAnswersResponse = UpdateCurrentUserAnswersResponses[keyof UpdateCurrentUserAnswersResponses];

export type GetCurrentChildAnswersData = {
    body?: never;
    path: {
        child_id: number;
    };
    query?: never;
    url: '/users/children-answers/{child_id}';
};

export type GetCurrentChildAnswersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCurrentChildAnswersError = GetCurrentChildAnswersErrors[keyof GetCurrentChildAnswersErrors];

export type GetCurrentChildAnswersResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: ChildAnswerPublic;
    };
};

export type GetCurrentChildAnswersResponse = GetCurrentChildAnswersResponses[keyof GetCurrentChildAnswersResponses];

export type UpdateCurrentChildAnswersData = {
    body: {
        [key: string]: ChildAnswerPublic;
    };
    path: {
        child_id: number;
    };
    query?: never;
    url: '/users/children-answers/{child_id}';
};

export type UpdateCurrentChildAnswersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCurrentChildAnswersError = UpdateCurrentChildAnswersErrors[keyof UpdateCurrentChildAnswersErrors];

export type UpdateCurrentChildAnswersResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCompletedMilestoneAnswerSessionsData = {
    body?: never;
    path: {
        child_id: number;
    };
    query?: never;
    url: '/users/milestone-answers-sessions/{child_id}';
};

export type GetCompletedMilestoneAnswerSessionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCompletedMilestoneAnswerSessionsError = GetCompletedMilestoneAnswerSessionsErrors[keyof GetCompletedMilestoneAnswerSessionsErrors];

export type GetCompletedMilestoneAnswerSessionsResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: MilestoneAnswerSessionPublic;
    };
};

export type GetCompletedMilestoneAnswerSessionsResponse = GetCompletedMilestoneAnswerSessionsResponses[keyof GetCompletedMilestoneAnswerSessionsResponses];

export type GetMilestonegroupsForSessionData = {
    body?: never;
    path: {
        answersession_id: number;
    };
    query?: never;
    url: '/users/feedback/answersession={answersession_id}';
};

export type GetMilestonegroupsForSessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMilestonegroupsForSessionError = GetMilestonegroupsForSessionErrors[keyof GetMilestonegroupsForSessionErrors];

export type GetMilestonegroupsForSessionResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: MilestoneGroupPublic;
    };
};

export type GetMilestonegroupsForSessionResponse = GetMilestonegroupsForSessionResponses[keyof GetMilestonegroupsForSessionResponses];

export type GetSummaryFeedbackForAnswersessionData = {
    body?: never;
    path: {
        answersession_id: number;
    };
    query?: never;
    url: '/users/feedback/answersession={answersession_id}/summary';
};

export type GetSummaryFeedbackForAnswersessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSummaryFeedbackForAnswersessionError = GetSummaryFeedbackForAnswersessionErrors[keyof GetSummaryFeedbackForAnswersessionErrors];

export type GetSummaryFeedbackForAnswersessionResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: number;
    };
};

export type GetSummaryFeedbackForAnswersessionResponse = GetSummaryFeedbackForAnswersessionResponses[keyof GetSummaryFeedbackForAnswersessionResponses];

export type GetDetailedFeedbackForAnswersessionData = {
    body?: never;
    path: {
        answersession_id: number;
    };
    query?: never;
    url: '/users/feedback/answersession={answersession_id}/detailed';
};

export type GetDetailedFeedbackForAnswersessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDetailedFeedbackForAnswersessionError = GetDetailedFeedbackForAnswersessionErrors[keyof GetDetailedFeedbackForAnswersessionErrors];

export type GetDetailedFeedbackForAnswersessionResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: {
            [key: string]: number;
        };
    };
};

export type GetDetailedFeedbackForAnswersessionResponse = GetDetailedFeedbackForAnswersessionResponses[keyof GetDetailedFeedbackForAnswersessionResponses];

export type AuthCookieLoginData = {
    body: BodyAuthCookieLoginAuthLoginPost;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthCookieLoginErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthCookieLoginError = AuthCookieLoginErrors[keyof AuthCookieLoginErrors];

export type AuthCookieLoginResponses = {
    /**
     * Successful Response
     */
    200: unknown;
    /**
     * No Content
     */
    204: void;
};

export type AuthCookieLoginResponse = AuthCookieLoginResponses[keyof AuthCookieLoginResponses];

export type AuthCookieLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type AuthCookieLogoutErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
};

export type AuthCookieLogoutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
    /**
     * No Content
     */
    204: void;
};

export type AuthCookieLogoutResponse = AuthCookieLogoutResponses[keyof AuthCookieLogoutResponses];

export type RegisterRegisterData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterRegisterErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterRegisterError = RegisterRegisterErrors[keyof RegisterRegisterErrors];

export type RegisterRegisterResponses = {
    /**
     * Successful Response
     */
    201: UserRead;
};

export type RegisterRegisterResponse = RegisterRegisterResponses[keyof RegisterRegisterResponses];

export type ResetForgotPasswordData = {
    body: BodyResetForgotPasswordAuthForgotPasswordPost;
    path?: never;
    query?: never;
    url: '/auth/forgot-password';
};

export type ResetForgotPasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetForgotPasswordError = ResetForgotPasswordErrors[keyof ResetForgotPasswordErrors];

export type ResetForgotPasswordResponses = {
    /**
     * Successful Response
     */
    202: unknown;
};

export type ResetResetPasswordData = {
    body: BodyResetResetPasswordAuthResetPasswordPost;
    path?: never;
    query?: never;
    url: '/auth/reset-password';
};

export type ResetResetPasswordErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetResetPasswordError = ResetResetPasswordErrors[keyof ResetResetPasswordErrors];

export type ResetResetPasswordResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VerifyRequestTokenData = {
    body: BodyVerifyRequestTokenAuthRequestVerifyTokenPost;
    path?: never;
    query?: never;
    url: '/auth/request-verify-token';
};

export type VerifyRequestTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyRequestTokenError = VerifyRequestTokenErrors[keyof VerifyRequestTokenErrors];

export type VerifyRequestTokenResponses = {
    /**
     * Successful Response
     */
    202: unknown;
};

export type VerifyVerifyData = {
    body: BodyVerifyVerifyAuthVerifyPost;
    path?: never;
    query?: never;
    url: '/auth/verify';
};

export type VerifyVerifyErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyVerifyError = VerifyVerifyErrors[keyof VerifyVerifyErrors];

export type VerifyVerifyResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type VerifyVerifyResponse = VerifyVerifyResponses[keyof VerifyVerifyResponses];

export type GetResearchDataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/research/data/';
};

export type GetResearchDataResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetResearchNamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/research/names/';
};

export type GetResearchNamesResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: {
            [key: string]: string;
        };
    };
};

export type GetResearchNamesResponse = GetResearchNamesResponses[keyof GetResearchNamesResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};